{"version":3,"sources":["components/Cubes/Cube.tsx","components/Lights/Lights.tsx","components/Enviorenment/Enviorenment.tsx","index.tsx"],"names":["Cube","mesh","useRef","time","_useState","useState","_useState2","Object","slicedToArray","isHovered","setIsHovered","_useState3","_useState4","isActive","setIsActive","isActiveRef","position","useMemo","random","timeMod","color","useEffect","current","useFrame","rotation","y","Math","sin","onHover","useCallback","e","value","stopPropagation","onClick","v","react_default","a","createElement","ref","onPointerOver","onPointerOut","attach","args","roughness","metalness","Lights","intensity","Enviorenment","side","BackSide","rootElement","document","getElementById","ReactDOM","render","Fragment","web","Cube_Cube","Lights_Lights","Enviorenment_Enviorenment"],"mappings":"oNAUeA,EAAiB,WAC5B,IAAMC,EAAYC,mBACZC,EAAYD,iBAAO,GAFSE,EAIKC,oBAAS,GAJdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAI3BK,EAJ2BH,EAAA,GAIhBI,EAJgBJ,EAAA,GAAAK,EAKGN,oBAAS,GALZO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAK3BE,EAL2BD,EAAA,GAKjBE,EALiBF,EAAA,GAO5BG,EAAmBb,iBAAOW,GAG1BG,EAAgBC,kBAAQ,WAC5B,MAAO,CAACC,kBAAQ,EAAG,GAAG,GAAOA,kBAAQ,EAAG,GAAG,GAAOA,kBAAQ,EAAG,GAAG,KAC/D,IAGGC,EAAUF,kBAAQ,kBAAMC,iBAAO,GAAK,GAAG,IAAO,IAG9CE,EAAQX,EAAY,SAAYI,EAAW,SAAW,SAG5DQ,oBAAU,WACRN,EAAYO,QAAUT,GACrB,CAACA,IAGJU,YAAS,WACPtB,EAAKqB,QAAQE,SAASC,GAAK,IAAON,EAC9BJ,EAAYO,UACdnB,EAAKmB,SAAW,IAChBrB,EAAKqB,QAAQN,SAASS,EAAIT,EAAS,GAA8B,GAAzBU,KAAKC,IAAIxB,EAAKmB,YAK1D,IAAMM,EAAUC,sBACd,SAACC,EAAGC,GACFD,EAAEE,kBACFtB,EAAaqB,IAEf,CAACrB,IAGGuB,EAAUJ,sBACd,SAAAC,GACEA,EAAEE,kBACFlB,EAAY,SAACoB,GAAD,OAAaA,KAE3B,CAACpB,IAGH,OACEqB,EAAAC,EAAAC,cAAA,QACEC,IAAKrC,EACLe,SAAUA,EACViB,QAAS,SAACH,GAAD,OAAYG,EAAQH,IAC7BS,cAAe,SAACT,GAAD,OAAYF,EAAQE,GAAG,IACtCU,aAAc,SAACV,GAAD,OAAYF,EAAQE,GAAG,KAErCK,EAAAC,EAAAC,cAAA,qBAAmBI,OAAO,WAAWC,KAAM,CAAC,KAAO,GAAK,OACxDP,EAAAC,EAAAC,cAAA,wBACEI,OAAO,WACPrB,MAAOA,EACPuB,UAAW,GACXC,UAAW,OCxERC,EAAmB,WAU9B,OACEV,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAXe,WACjB,OACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,wBAAsBK,KAAM,CAAC,GAAK,GAAI,IAAKD,OAAO,aAClDN,EAAAC,EAAAC,cAAA,qBAAmBjB,MAAO,SAAUqB,OAAO,eAO7C,MACAN,EAAAC,EAAAC,cAAA,gBAAcS,UAAW,KACzBX,EAAAC,EAAAC,cAAA,cAAYS,UAAW,KAAM9B,SAAU,CAAC,EAAG,EAAG,cCbvC+B,EAAyB,WACpC,OACEZ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,wBAAsBK,KAAM,CAAC,EAAG,GAAI,IAAKD,OAAO,aAChDN,EAAAC,EAAAC,cAAA,wBACEjB,MAAO,SACPqB,OAAO,WACPO,KAAMC,WACNL,UAAW,aCUnB,IAAMM,EAAcC,SAASC,eAAe,OAC5CC,IAASC,OAAOnB,EAAAC,EAAAC,cAbhB,WACE,OACEF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,SAOQ,MAAST","file":"static/js/main.fb916697.chunk.js","sourcesContent":["import React, {\n    useMemo,\n    useRef,\n    useState,\n    useEffect,\n    useCallback\n  } from \"react\";\n  import { random } from \"lodash\";\n  import { useFrame } from \"react-three-fiber\";\n\n  export const Cube: React.FC = () => {\n    const mesh: any = useRef();\n    const time: any = useRef(0);\n\n    const [isHovered, setIsHovered]: any = useState(false);\n    const [isActive, setIsActive]: any = useState(false);\n\n    const isActiveRef: any = useRef(isActive);\n\n    // position\n    const position: any = useMemo(() => {\n      return [random(-3, 3, true), random(-3, 3, true), random(-3, 3, true)];\n    }, []);\n\n    // random time mod factor\n    const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n    // color\n    const color = isHovered ? 0xe5d54d : (isActive ? 0xf7e7e5 : 0xf95b3c);\n\n    //useEffect of the activeState\n    useEffect(() => {\n      isActiveRef.current = isActive;\n    }, [isActive]);\n\n    // raf loop\n    useFrame(() => {\n      mesh.current.rotation.y += 0.01 * timeMod;\n      if (isActiveRef.current) {\n        time.current += 0.03;\n        mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\n      }\n    });\n\n    // Events\n    const onHover = useCallback(\n      (e, value) => {\n        e.stopPropagation();\n        setIsHovered(value);\n      },\n      [setIsHovered]\n    );\n\n    const onClick = useCallback(\n      e => {\n        e.stopPropagation();\n        setIsActive((v: any) => !v);\n      },\n      [setIsActive]\n    );\n\n    return (\n      <mesh\n        ref={mesh}\n        position={position}\n        onClick={(e: any) => onClick(e)}\n        onPointerOver={(e: any) => onHover(e, true)}\n        onPointerOut={(e: any) => onHover(e, false)}\n      >\n        <boxBufferGeometry attach=\"geometry\" args={[0.047, 0.5, 0.29]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color={color}\n          roughness={0.6}\n          metalness={0.1}\n        />\n      </mesh>\n    );\n  };","import React from \"react\";\n\nexport const Lights: React.FC = () => {\n  const FakeSphere = () => {\n    return (\n      <mesh>\n        <sphereBufferGeometry args={[0.7, 30, 30]} attach=\"geometry\" />\n        <meshBasicMaterial color={0xfff1ef} attach=\"material\" />\n      </mesh>\n    );\n  };\n\n  return (\n    <group>\n      <FakeSphere />\n      <ambientLight intensity={0.9} />\n      <pointLight intensity={1.12} position={[0, 0, 0]} />\n    </group>\n  );\n};\n","import React from \"react\";\nimport { BackSide } from \"three\";\n\nexport const Enviorenment: React.FC = () => {\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[5, 10, 10]} attach=\"geometry\" />\n      <meshStandardMaterial\n        color={0xd2452b}\n        attach=\"material\"\n        side={BackSide}\n        metalness={0.4}\n      />\n    </mesh>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Cube } from \"./components/Cubes/Cube\";\nimport { Lights } from \"./components/Lights/Lights\";\nimport { Enviorenment } from \"./components/Enviorenment/Enviorenment\";\n\nimport \"./index.scss\";\n\nfunction App() {\n  return (\n    <>\n      <Canvas>\n        <Cube />\n        <Lights />\n        <Enviorenment />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"app\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}